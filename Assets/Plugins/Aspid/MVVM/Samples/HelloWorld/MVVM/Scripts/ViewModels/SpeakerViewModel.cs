using System;

// Explanation:
// 1. _outText field for OneWay binding to get the value from Model.
// 2. _inputText field for TwoWay binding to set the initial value, and further get the value from View.
// 3. Say command, uses OneTime binding and is executed from View
namespace Aspid.MVVM.Samples.HelloWorld.MVVM
{
    // ViewModelAttribute is a marker for Source Generator.
    // For Source Generator to work properly, the class must be partial.
    // Source Generator implements IViewModel and generates related properties for marked members.
    [ViewModel]
    public sealed partial class SpeakerViewModel : IDisposable
    { 
        // OneWayBindAttribute is a marker for Source Generator that generates a one-way binding.
        // Source Generator based on the marked field
        // creates “OutText” property, “SetOutText” method and “OutTextChanged” event for the binding.
        // Source Generator works correctly with the following name style: "s_outText", "m_outText", "_outText", "outText".
        // For Source Generator to work, it is also necessary to mark the class with the ViewModelAttribute attribute.
        [OneWayBind] private string _outText;
        
        // TwoWayBindAttribute is a marker for Source Generator that generates a two-way binding.
        // Source Generator based on the marked field
        // creates “InputText” property, “SetInputText” method and “InputTextChanged” event for the binding.
        // Source Generator works correctly with the following name style: "s_inputText", "m_inputText", "_inputText", "inputText".
        // For Source Generator to work, it is also necessary to mark the class with the ViewModelAttribute attribute.
        [TwoWayBind] private string _inputText;
        
        private readonly Speaker _speaker;
    
        public SpeakerViewModel(Speaker speaker)
        {
            _speaker = speaker;
            _outText = speaker.Text;
            _inputText = speaker.Text;
            
            // Add a handler for the TextChanged event that was generated by the Source Generator.
            _speaker.TextChanged += SetOutText;
        }
    
        // RelayCommandAttribute is a token for Source Generator.
        // Source Generator creates a read-only property “SayCommand”, based on this method.
        // The “SayCommand” property only supports OneTime and OneWay binding on the View side, since it is read-only.
        // For Source Generator to work, it is also necessary to label the class with ViewModelAttribute.
        [RelayCommand]
        private void Say()
        {
            // Although it is not necessary for reading, it is recommended to read the value through the generated property.
            // For convenience, the code analyzer works, which will generate a warning if _inputText is used.
            _speaker.Say(InputText);
        }

        public void Dispose() =>
            _speaker.TextChanged -= SetOutText;
    }
}