using System;

// Explanation:
// 1. _outText field for OneWay binding to get the value from Model.
// 2. _inputText field for TwoWay binding to set the initial value, and further get the value from View.
// 3. When InputText is changed, we immediately pass it to the model through the OnInputTextChanged method.
namespace Aspid.MVVM.Samples.HelloWorld.MVVM
{
    // ViewModelAttribute is a marker for Source Generator.
    // For Source Generator to work properly, the class must be partial.
    // Source Generator implements IViewModel and generates related properties for marked members.
    [ViewModel]
    public sealed partial class MomentSpeakerViewModel : IDisposable
    {
        // OneWayBindAttribute is a marker for Source Generator that generates a one-way binding.
        // Source Generator based on the marked field
        // creates “OutText” property, “SetOutText” method and “OutTextChanged” event for the binding.
        // Source Generator works correctly with the following name style: "s_outText", "m_outText", "_outText", "outText".
        // For Source Generator to work, it is also necessary to mark the class with the ViewModelAttribute attribute.
        [OneWayBind] private string _outText;
        
        // TwoWayBindAttribute is a marker for Source Generator that generates a two-way binding.
        // Source Generator based on the marked field
        // creates “InputText” property, “SetInputText” method and “InputTextChanged” event for the binding.
        // Source Generator works correctly with the following name style: "s_inputText", "m_inputText", "_inputText", "inputText".
        // For Source Generator to work, it is also necessary to mark the class with the ViewModelAttribute attribute.
        [TwoWayBind] private string _inputText;
    
        private readonly Speaker _speaker;
    
        public MomentSpeakerViewModel(Speaker speaker)
        {
            _speaker = speaker;
            _outText = speaker.Text;
            _inputText = speaker.Text;
            
            // Add a handler for the TextChanged event that was generated by the Source Generator.
            _speaker.TextChanged += SetOutText;
        }
        
        // You can implement two partial methods for each generated bound property:
        // Call before changing:
        // partial void On(Property name)Changing(string oldValue, string newValue)
        // Called after changing:
        // partial void On(Property name)Changed(string newValue)
        partial void OnInputTextChanged(string newValue) =>
            _speaker.Say(newValue);
        
        public void Dispose() =>
            _speaker.TextChanged -= SetOutText;
    }
}